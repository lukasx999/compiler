# :so syntax.vim


# Preprocessor Macros
$define FOO let foo'int = 45;

$macro FOO
    if true {
    }
$end



#*
Multi line comments
*#



# Statements
# All variables are immutable by default
let foo'int = 5;          # Declaration & Initialization
let bar'int;              # Declaration
let mut baz'int;          # Create a mutable variable
1+2;                      # Expression Statements
1+2-(3*4+(5/6+(45)))+7-8; # Complex Expressions
let $global'int;          # Global variables should start with `$`

# Types:
1;              # Integers
1.0;            # Floats
true && false;  # Booleans
"Hello, World"; # Strings

foo = 3;                           # Assignment
func().object.field = 45+3*(1/2);  # Complex Assignment
foo = bar = baz = 45;              # Multi identifier Assignment
45 + (foo = 32) == true;           # Assignment is an expression


let foo'int = 45; # Integers
let foo'bool = true; # Booleans
let foo'str = "greetings"; # Strings

{
# An empty Block (aka scope)
    {
    # They can also be nested!
        {
            let qux'int = 45; # Local variabled, only visible inside the scope
        }
    }
}


# Echo
echo "foo";
echo 1+2+3;

# Extern functions
ext defun puts(string'str) -> int;



# Conditionals

if 1==2 {
    let foo'int = 45;
}

# Else
if 1 {}
else {}

# Loops

loop {
    escape; # break out of the loop
}

# loop for 5 times

let x'int = 0;
loop {
    x = x + 1;
    if x == 5 {
        escape;
    }
}



# Functions

defun main() -> int {
    ret 0; # Return a value
}

defun func(foo'int, bar'str, baz'bool) -> void { # Function parameters
    ret; # Return nothing
}

defun foo() {} # Implicit returntype `void`

# Function call
foo();
foo(45, bar, true);                                            # With arguments
class.method(arg, 3, true).closure().inner(true, 1, 2, 3)()(); # Complex calls


# Lambda function
() -> void => {}
() => {}
(foo'int, bar'str) -> int => { ret 5; }


# OOP

container foo {
    let mut a'int;              # Variables
    defun foo() -> void {       # Constructor
    }
    defun bar(arg'int) -> int { # Method
    ret 45;
    }
}


let mut object'foo = create foo();  # Creating an object
foo.a;                              # Accessing members
let result'int = foo.bar(3);        # Calling methods
demolish object;                    # Destroying an object
