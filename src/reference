# :so syntax.vim


# Preprocessor Macros
$define FOO let foo'int = 45;

$macro FOO
    if true {
    }
$end



#*
Multi line comments
*#



# Statements
# All variables are immutable by default
let foo'int = 5;     # Declaration & Initialization
let bar'int;         # Declaration
let mut baz'int;     # Create a mutable variable
1+2;                 # Expression Statements
1+2-(3*4+(5/6))+7-8; # Complex Expressions

# Types:
1; # Integers
1.0; # Floats
true && false; # Bools
nil; # Nil
"Hello, World"; # Strings

foo = 3; # Assignment

let foo'int = 45; # Integers
let foo'bool = true; # Booleans
let foo'str = "greetings"; # Strings

{
# An empty Block (aka scope)
    {
    # They can also be nested!
        {
            let qux'int = 45; # Local variabled, only visible inside the scope
        }
    }
}


# If Statement
if 1==2 {
    let foo'int = 45;
}

# Else
if 1 {}
else {}

# Functions
# main function
defun main (argc'int, args'str) -> int {
    ret 0; # Return a value
    ret; # Return no value
}

defun func () -> void {
    ret;
}


# Lambda function
() -> void => {}
(foo'int) -> int => { ret 5; }
